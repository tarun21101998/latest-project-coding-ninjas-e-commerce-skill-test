{"version":3,"file":"react-placeholder-loading.cjs.production.min.js","sources":["../src/PlaceholderLoading.tsx","../src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { IPlaceholderLoadingProps } from './types';\nimport { getShapeProps, getSvgProps } from './utils';\n\nconst PlaceholderLoading = ({\n  width,\n  height,\n  colorStart = '#f0f0f0',\n  colorEnd = '#e0e0e0',\n  shape,\n}: IPlaceholderLoadingProps) => {\n  const ShapeElement = shape;\n  const shapeProps = getShapeProps({ width, height })(shape);\n  const svgProps = getSvgProps({ width, height })(shape);\n\n  return (\n    <svg {...svgProps}>\n      <ShapeElement\n        {...shapeProps}\n        role='img'\n        data-testid=\"shapeElement\"\n        fill=\"url(#linear-gradient)\"\n      />\n      <defs>\n        <linearGradient\n          id=\"linear-gradient\"\n          x1={'0%'}\n          y1={'0%'}\n          x2={'100%'}\n          y2={'0%'}\n        >\n          <stop offset={'0%'} stopColor={colorStart}>\n            <animate\n              attributeName=\"offset\"\n              values={`-2; -2; 1`}\n              dur=\"2s\"\n              keyTimes={'0; 0.70; 1'}\n              repeatCount=\"indefinite\"\n            />\n          </stop>\n          <stop offset={'50%'} stopColor={colorEnd}>\n            <animate\n              attributeName=\"offset\"\n              values={`0; 0; 2`}\n              dur=\"2s\"\n              keyTimes={'0; 0.70; 1'}\n              repeatCount=\"indefinite\"\n            />\n          </stop>\n          <stop offset={'100%'} stopColor={colorStart}>\n            <animate\n              attributeName=\"offset\"\n              values={`0; 0; 3`}\n              dur=\"2s\"\n              keyTimes={'0; 0.90; 1'}\n              repeatCount=\"indefinite\"\n            />\n          </stop>\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};\n\nexport default PlaceholderLoading;\n","import { ShapeInfo, AvailableShapes } from 'types';\n\nexport const getShapeProps = (shapeInfo: ShapeInfo) => {\n  const { width, height } = shapeInfo;\n  return (type: AvailableShapes) => {\n    const shapeOptions = {\n      rect: {\n        width,\n        height,\n      },\n      circle: {\n        cx: Number(width) / 2,\n        cy: Number(height) / 2,\n        r: (Number(height) + Number(width)) / 4,\n      },\n    };\n\n    return shapeOptions[type];\n  };\n};\n\nexport const getSvgProps = (shapeInfo: ShapeInfo) => {\n  const { width, height } = shapeInfo;\n  return (type: AvailableShapes) => {\n    const svgProps = {\n      rect: {\n        width,\n        height,\n      },\n      circle: {\n        width: width,\n        height: height,\n      },\n    };\n\n    return svgProps[type];\n  };\n};\n"],"names":["width","height","colorStart","colorEnd","shape","ShapeElement","shapeProps","shapeInfo","type","rect","circle","cx","Number","cy","r","getShapeProps","svgProps","getSvgProps","React","role","fill","id","x1","y1","x2","y2","offset","stopColor","attributeName","values","dur","keyTimes","repeatCount"],"mappings":"oDAI2B,gBACzBA,IAAAA,MACAC,IAAAA,WACAC,WAAAA,aAAa,gBACbC,SAAAA,aAAW,YACXC,IAAAA,MAEMC,EAAeD,EACfE,ECVqB,SAACC,OACpBP,EAAkBO,EAAlBP,MAAOC,EAAWM,EAAXN,cACR,SAACO,SACe,CACnBC,KAAM,CACJT,MAAAA,EACAC,OAAAA,GAEFS,OAAQ,CACNC,GAAIC,OAAOZ,GAAS,EACpBa,GAAID,OAAOX,GAAU,EACrBa,GAAIF,OAAOX,GAAUW,OAAOZ,IAAU,IAItBQ,IDLHO,CAAc,CAAEf,MAAAA,EAAOC,OAAAA,GAAvBc,CAAiCX,GAC9CY,ECQmB,SAACT,OAClBP,EAAkBO,EAAlBP,MAAOC,EAAWM,EAAXN,cACR,SAACO,SACW,CACfC,KAAM,CACJT,MAAAA,EACAC,OAAAA,GAEFS,OAAQ,CACNV,MAAOA,EACPC,OAAQA,IAIIO,IDtBDS,CAAY,CAAEjB,MAAAA,EAAOC,OAAAA,GAArBgB,CAA+Bb,UAG9Cc,uCAASF,GACPE,gBAACb,mBACKC,GACJa,KAAK,oBACO,eACZC,KAAK,2BAEPF,4BACEA,kCACEG,GAAG,kBACHC,GAAI,KACJC,GAAI,KACJC,GAAI,OACJC,GAAI,MAEJP,wBAAMQ,OAAQ,KAAMC,UAAWzB,GAC7BgB,2BACEU,cAAc,SACdC,mBACAC,IAAI,KACJC,SAAU,aACVC,YAAY,gBAGhBd,wBAAMQ,OAAQ,MAAOC,UAAWxB,GAC9Be,2BACEU,cAAc,SACdC,iBACAC,IAAI,KACJC,SAAU,aACVC,YAAY,gBAGhBd,wBAAMQ,OAAQ,OAAQC,UAAWzB,GAC/BgB,2BACEU,cAAc,SACdC,iBACAC,IAAI,KACJC,SAAU,aACVC,YAAY"}